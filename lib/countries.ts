// Country and nationality data using Intl.DisplayNames for comprehensive coverage

// Get all country codes (ISO 3166-1 alpha-2)
const getAllCountryCodes = (): string[] => {
  // Common country codes - Intl.DisplayNames doesn't provide a way to get all codes
  // so we'll use a comprehensive list of ISO 3166-1 alpha-2 codes
  return [
    "AD",
    "AE",
    "AF",
    "AG",
    "AI",
    "AL",
    "AM",
    "AO",
    "AQ",
    "AR",
    "AS",
    "AT",
    "AU",
    "AW",
    "AX",
    "AZ",
    "BA",
    "BB",
    "BD",
    "BE",
    "BF",
    "BG",
    "BH",
    "BI",
    "BJ",
    "BL",
    "BM",
    "BN",
    "BO",
    "BQ",
    "BR",
    "BS",
    "BT",
    "BV",
    "BW",
    "BY",
    "BZ",
    "CA",
    "CC",
    "CD",
    "CF",
    "CG",
    "CH",
    "CI",
    "CK",
    "CL",
    "CM",
    "CN",
    "CO",
    "CR",
    "CU",
    "CV",
    "CW",
    "CX",
    "CY",
    "CZ",
    "DE",
    "DJ",
    "DK",
    "DM",
    "DO",
    "DZ",
    "EC",
    "EE",
    "EG",
    "EH",
    "ER",
    "ES",
    "ET",
    "FI",
    "FJ",
    "FK",
    "FM",
    "FO",
    "FR",
    "GA",
    "GB",
    "GD",
    "GE",
    "GF",
    "GG",
    "GH",
    "GI",
    "GL",
    "GM",
    "GN",
    "GP",
    "GQ",
    "GR",
    "GS",
    "GT",
    "GU",
    "GW",
    "GY",
    "HK",
    "HM",
    "HN",
    "HR",
    "HT",
    "HU",
    "ID",
    "IE",
    "IL",
    "IM",
    "IN",
    "IO",
    "IQ",
    "IR",
    "IS",
    "IT",
    "JE",
    "JM",
    "JO",
    "JP",
    "KE",
    "KG",
    "KH",
    "KI",
    "KM",
    "KN",
    "KP",
    "KR",
    "KW",
    "KY",
    "KZ",
    "LA",
    "LB",
    "LC",
    "LI",
    "LK",
    "LR",
    "LS",
    "LT",
    "LU",
    "LV",
    "LY",
    "MA",
    "MC",
    "MD",
    "ME",
    "MF",
    "MG",
    "MH",
    "MK",
    "ML",
    "MM",
    "MN",
    "MO",
    "MP",
    "MQ",
    "MR",
    "MS",
    "MT",
    "MU",
    "MV",
    "MW",
    "MX",
    "MY",
    "MZ",
    "NA",
    "NC",
    "NE",
    "NF",
    "NG",
    "NI",
    "NL",
    "NO",
    "NP",
    "NR",
    "NU",
    "NZ",
    "OM",
    "PA",
    "PE",
    "PF",
    "PG",
    "PH",
    "PK",
    "PL",
    "PM",
    "PN",
    "PR",
    "PS",
    "PT",
    "PW",
    "PY",
    "QA",
    "RE",
    "RO",
    "RS",
    "RU",
    "RW",
    "SA",
    "SB",
    "SC",
    "SD",
    "SE",
    "SG",
    "SH",
    "SI",
    "SJ",
    "SK",
    "SL",
    "SM",
    "SN",
    "SO",
    "SR",
    "SS",
    "ST",
    "SV",
    "SX",
    "SY",
    "SZ",
    "TC",
    "TD",
    "TF",
    "TG",
    "TH",
    "TJ",
    "TK",
    "TL",
    "TM",
    "TN",
    "TO",
    "TR",
    "TT",
    "TV",
    "TW",
    "TZ",
    "UA",
    "UG",
    "UM",
    "US",
    "UY",
    "UZ",
    "VA",
    "VC",
    "VE",
    "VG",
    "VI",
    "VN",
    "VU",
    "WF",
    "WS",
    "YE",
    "YT",
    "ZA",
    "ZM",
    "ZW",
  ]
}

// Create display names instance for countries
const countryDisplayNames = new Intl.DisplayNames(["en"], { type: "region" })

// Create a mapping for nationalities (since Intl.DisplayNames doesn't provide nationalities)
const nationalityMap: Record<string, string> = {
  AD: "Andorran",
  AE: "Emirati",
  AF: "Afghan",
  AG: "Antiguan",
  AI: "Anguillan",
  AL: "Albanian",
  AM: "Armenian",
  AO: "Angolan",
  AR: "Argentine",
  AS: "American Samoan",
  AT: "Austrian",
  AU: "Australian",
  AW: "Aruban",
  AZ: "Azerbaijani",
  BA: "Bosnian",
  BB: "Barbadian",
  BD: "Bangladeshi",
  BE: "Belgian",
  BF: "Burkinabé",
  BG: "Bulgarian",
  BH: "Bahraini",
  BI: "Burundian",
  BJ: "Beninese",
  BM: "Bermudian",
  BN: "Bruneian",
  BO: "Bolivian",
  BR: "Brazilian",
  BS: "Bahamian",
  BT: "Bhutanese",
  BW: "Botswanan",
  BY: "Belarusian",
  BZ: "Belizean",
  CA: "Canadian",
  CD: "Congolese",
  CF: "Central African",
  CG: "Congolese",
  CH: "Swiss",
  CI: "Ivorian",
  CK: "Cook Islander",
  CL: "Chilean",
  CM: "Cameroonian",
  CN: "Chinese",
  CO: "Colombian",
  CR: "Costa Rican",
  CU: "Cuban",
  CV: "Cape Verdean",
  CY: "Cypriot",
  CZ: "Czech",
  DE: "German",
  DJ: "Djiboutian",
  DK: "Danish",
  DM: "Dominican",
  DO: "Dominican",
  DZ: "Algerian",
  EC: "Ecuadorian",
  EE: "Estonian",
  EG: "Egyptian",
  ER: "Eritrean",
  ES: "Spanish",
  ET: "Ethiopian",
  FI: "Finnish",
  FJ: "Fijian",
  FM: "Micronesian",
  FO: "Faroese",
  FR: "French",
  GA: "Gabonese",
  GB: "British",
  GD: "Grenadian",
  GE: "Georgian",
  GH: "Ghanaian",
  GI: "Gibraltarian",
  GL: "Greenlandic",
  GM: "Gambian",
  GN: "Guinean",
  GQ: "Equatorial Guinean",
  GR: "Greek",
  GT: "Guatemalan",
  GU: "Guamanian",
  GW: "Guinea-Bissauan",
  GY: "Guyanese",
  HK: "Hong Kong",
  HN: "Honduran",
  HR: "Croatian",
  HT: "Haitian",
  HU: "Hungarian",
  ID: "Indonesian",
  IE: "Irish",
  IL: "Israeli",
  IN: "Indian",
  IQ: "Iraqi",
  IR: "Iranian",
  IS: "Icelandic",
  IT: "Italian",
  JM: "Jamaican",
  JO: "Jordanian",
  JP: "Japanese",
  KE: "Kenyan",
  KG: "Kyrgyz",
  KH: "Cambodian",
  KI: "I-Kiribati",
  KM: "Comorian",
  KN: "Kittitian",
  KP: "North Korean",
  KR: "South Korean",
  KW: "Kuwaiti",
  KY: "Caymanian",
  KZ: "Kazakhstani",
  LA: "Laotian",
  LB: "Lebanese",
  LC: "Saint Lucian",
  LI: "Liechtensteiner",
  LK: "Sri Lankan",
  LR: "Liberian",
  LS: "Basotho",
  LT: "Lithuanian",
  LU: "Luxembourgish",
  LV: "Latvian",
  LY: "Libyan",
  MA: "Moroccan",
  MC: "Monégasque",
  MD: "Moldovan",
  ME: "Montenegrin",
  MG: "Malagasy",
  MH: "Marshallese",
  MK: "Macedonian",
  ML: "Malian",
  MM: "Myanmar",
  MN: "Mongolian",
  MO: "Macanese",
  MR: "Mauritanian",
  MS: "Montserratian",
  MT: "Maltese",
  MU: "Mauritian",
  MV: "Maldivian",
  MW: "Malawian",
  MX: "Mexican",
  MY: "Malaysian",
  MZ: "Mozambican",
  NA: "Namibian",
  NC: "New Caledonian",
  NE: "Nigerien",
  NG: "Nigerian",
  NI: "Nicaraguan",
  NL: "Dutch",
  NO: "Norwegian",
  NP: "Nepalese",
  NR: "Nauruan",
  NZ: "New Zealand",
  OM: "Omani",
  PA: "Panamanian",
  PE: "Peruvian",
  PG: "Papua New Guinean",
  PH: "Filipino",
  PK: "Pakistani",
  PL: "Polish",
  PR: "Puerto Rican",
  PS: "Palestinian",
  PT: "Portuguese",
  PW: "Palauan",
  PY: "Paraguayan",
  QA: "Qatari",
  RO: "Romanian",
  RS: "Serbian",
  RU: "Russian",
  RW: "Rwandan",
  SA: "Saudi Arabian",
  SB: "Solomon Islander",
  SC: "Seychellois",
  SD: "Sudanese",
  SE: "Swedish",
  SG: "Singaporean",
  SI: "Slovenian",
  SK: "Slovak",
  SL: "Sierra Leonean",
  SM: "Sammarinese",
  SN: "Senegalese",
  SO: "Somali",
  SR: "Surinamese",
  SS: "South Sudanese",
  ST: "São Toméan",
  SV: "Salvadoran",
  SY: "Syrian",
  SZ: "Swazi",
  TD: "Chadian",
  TG: "Togolese",
  TH: "Thai",
  TJ: "Tajik",
  TL: "Timorese",
  TM: "Turkmen",
  TN: "Tunisian",
  TO: "Tongan",
  TR: "Turkish",
  TT: "Trinidadian",
  TV: "Tuvaluan",
  TW: "Taiwanese",
  TZ: "Tanzanian",
  UA: "Ukrainian",
  UG: "Ugandan",
  US: "American",
  UY: "Uruguayan",
  UZ: "Uzbek",
  VA: "Vatican",
  VC: "Saint Vincentian",
  VE: "Venezuelan",
  VG: "British Virgin Islander",
  VI: "U.S. Virgin Islander",
  VN: "Vietnamese",
  VU: "Vanuatuan",
  WS: "Samoan",
  YE: "Yemeni",
  ZA: "South African",
  ZM: "Zambian",
  ZW: "Zimbabwean",
}

export function getCountryNames() {
  const countryCodes = getAllCountryCodes()
  const countries = countryCodes
    .map((code) => {
      try {
        const name = countryDisplayNames.of(code)
        return name ? { code, name } : null
      } catch {
        return null
      }
    })
    .filter((country): country is { code: string; name: string } => country !== null)
    .sort((a, b) => a.name.localeCompare(b.name))

  return countries
}

export function getNationalityNames() {
  const countryCodes = getAllCountryCodes()
  const nationalities = countryCodes
    .map((code) => {
      const nationality = nationalityMap[code]
      return nationality ? { code, name: nationality } : null
    })
    .filter((nationality): nationality is { code: string; name: string } => nationality !== null)
    .sort((a, b) => a.name.localeCompare(b.name))

  return nationalities
}

export function getCountryByCode(code: string) {
  try {
    const name = countryDisplayNames.of(code)
    return name ? { code, name } : null
  } catch {
    return null
  }
}

export function getNationalityByCode(code: string) {
  const nationality = nationalityMap[code]
  return nationality ? { code, name: nationality } : null
}
